// ==UserScript==
// @name        canvas-web-utils
// @version     1.0.0
// @author      acbart@udel.edu
// @description Tools for controlling Canvas online
// @homepage    https://github.com/UD-CIS-Teaching/canvas-web-utils#readme
// @supportURL  https://github.com/UD-CIS-Teaching/canvas-web-utils/issues
// @match       https://*.instructure.com/courses/*
// @grant       none
// @updateURL   https://github.com/UD-CIS-Teaching/canvas-web-utils/raw/master/dist/canvas-web-utils.user.js
// @downloadURL https://github.com/UD-CIS-Teaching/canvas-web-utils/raw/master/dist/canvas-web-utils.user.js
// ==/UserScript==

!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r,i=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}c((r=r.apply(t,e||[])).next())}))},o=function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},a=window.ENV.context_asset_string.split("_")[1],u=window.ENV.DEEP_LINKING_POST_MESSAGE_ORIGIN+"/api/v1/courses/";function c(t,e,n){return function(t,e,n){n.per_page=100;var r=[],i=$.Deferred();function o(t,e,o){if("success"===e){r.push.apply(r,t);var u=o.getResponseHeader("link"),c=function(t){for(var e,n=/page=(\d+?).*?rel="(.*?)"/gm,r={};null!==(e=n.exec(t));)r[e[2]]=Number.parseInt(e[1]);return r}(u);i.notify(r,c);var l,s=null==(l=/,[\s]*<.*?[\?&]page=([^\&]+).*?>;[\s]*rel="next"/g.exec(u))?null:l[1];null!=s&&r.length<500?(n.page=s,a()):i.resolve(r)}else i.reject(t,e,o)}function a(){t(e,n,o)}return a(),i.promise()}(t,u+a+"/"+e,n)}function l(t,e,n,r){return i(this,void 0,void 0,(function(){return o(this,(function(i){return function t(e,n){return void 0===n&&(n=0),n<e.length?e[n]().then((function(){return t(e,n+1)})):new Promise((function(t){return t()}))}(n.map((function(n){return function(){var i,o;return i=100,o=n["student_ids[]"],new Promise((function(t,e){console.log("WAIT??",o,performance.now()),setTimeout((function(){console.log("I DID MY WAITING",o,performance.now()),t()}),i)})),c(t,e,n.options).done((function(t){return r(n,t)}))}}))),[2]}))}))}!function(t){t.submitted="submitted",t.unsubmitted="unsubmitted",t.graded="graded",t.pending_review="pending_review"}(r||(r={}));function s(t,e){return t.children[e].innerText||t.children[e].textContent}function d(t){t.forEach((function(t){return t.addEventListener("click",(function(){var e,n,r=t.closest("table");Array.from(r.querySelectorAll("tr:nth-child(n+2)")).sort((e=Array.from(t.parentNode.children).indexOf(t),n=this.asc=!this.asc,function(t,r){return i=s(n?t:r,e),o=s(n?r:t,e),""===i||""===o||isNaN(i)||isNaN(o)?i.toString().localeCompare(o):i-o;var i,o})).forEach((function(t){return r.appendChild(t)}))}))}))}function p(t,e,n){f("Preloaded students, staff, and assignments"),$("#cwu-activity-report-control-build").prop("disabled",!1),$("#cwu-activity-report-control-build").click((function(){$("#cwu-activity-report-area").html('\n<strong>Student Submissions</strong><br>\n<emphasis>\n    <span id=\'cwu-activity-report-area-student-loaded\'></span>\n    /\n    <span id=\'cwu-activity-report-area-student-count\'></span> loaded\n</emphasis>\n<div id=\'cwu-activity-report-area-student\'>\n    <table class="table table-striped table-bordered table-condensed"\n        id="cwu-activity-report-area-student-table">\n    <tr>\n        <th>Student</th>\n        <th>Submitted Recently</th>\n        <th>Total Unsubmitted</th>\n    </tr>\n    </table>\n</div>\n<strong>Staff Grading</strong>\n<table class="table table-striped table-bordered table-condensed"\nid="cwu-activity-report-area-grader-table">\n</table>\n'),d(document.querySelectorAll("#cwu-activity-report-area-student-table th")),f("");var i=$("#cwu-activity-report-control-start").val(),o=0,a=(n.filter((function(t){return t.published})).length,{});e.forEach((function(t){a[t.id]={total:0,recent:0}})),$("#cwu-activity-report-area-student-count").html(t.length+""),l($.get,"students/submissions",t.map((function(t){return{student:t,options:{"student_ids[]":t.id}}})),(function(t,n){var u=n.filter((function(t){return t.workflow_state===r.unsubmitted})).length,c=n.filter((function(t){return t.submitted_at>i?1:0}));n.forEach((function(t){t.workflow_state===r.graded&&t.grader_id in a&&(a[t.grader_id].total+=1,t.submitted_at>i&&(a[t.grader_id].recent+=1))})),function(t,e){var n={};e.forEach((function(t){n[t.id+""]=t}));var r="\n    <tr>\n        <th>Grader</th>\n        <th>Graded Recently</th>\n        <th>Graded Total</th>\n    </tr>\n    "+Object.keys(t).map((function(e){return"<tr>\n            <td>"+n[e].name+"</td>\n            <td>"+t[e].recent+"</td>\n            <td>"+t[e].total+"</td>\n        </tr>"})).join("\n");$("#cwu-activity-report-area-grader-table").html(r)}(a,e),$("#cwu-activity-report-area-student table").append($("<tr><td>"+t.student.name+"</td><td>"+c.length+"</td><td>"+u+"</td></tr>")),o+=1,$("#cwu-activity-report-area-student-loaded").html(o+"")}))}))}function f(t){$("#cwu-activity-report-status").html(t)}function v(t,e){var n=$('<span id="cwu-activity-report-status-'+e+'">'+e+"</span>");function r(t){return function(e,n){void 0===n||n.last===n.current?$("#cwu-activity-report-status-"+t).remove():void 0===n.last?$("#cwu-activity-report-status-"+t).html(t+"<span class='badge'>"+e.length+" so far</span>"):$("#cwu-activity-report-status-"+t).html(t+"<span class='badge'>"+(n.last-n.current)+"</span>")}}return $("#cwu-activity-report-status").append(n),t.progress(r(e)).done(r(e))}function b(){$("#section-tabs").append($("\n<li class='section'>\n    <button title='Activity Report' class='btn' id='cwu-activity-report-load'>Activity Report</button>\n</li>\n")),$("#cwu-activity-report-load").click((function(){var t,e,n;t="Activity Report",e='\n<div>\nStatus: <span id="cwu-activity-report-status">Loading</span>\n</div>\n<div id="cwu-activity-report-controls"></div>\n<div id="cwu-activity-report-area"></div>\n',0==$("#dialog").length&&$(document.body).append('<div title="'+t+'" id="dialog"></div>'),$("#dialog").dialog({autoOpen:!1,show:"blind",hide:"explode",width:"80%",height:document.documentElement.clientHeight-100}),$("#dialog").dialog("open"),$("#dialog").html(e),$("#cwu-activity-report-controls").html('\n<div>\n    <label for="cwu-activity-report-control-start">Completed since:</label>\n    <input type="text" class="" id="cwu-activity-report-control-start"\n        name="cwu-activity-report-control-start" title="YYYY-MM-DD hh:mm">\n</div>\n<div>\n    <button class=\'btn btn-success\' id=\'cwu-activity-report-control-build\'\n        disabled\n        >Download and Build Report</button>\n</div>\n'),$("#cwu-activity-report-control-start").val(((n=new Date).setDate(n.getDate()-7),n.toISOString())),$.when(v(c($.get,"users",{"enrollment_type[]":"student"}),"Students"),v(c($.get,"users",{"enrollment_type[]":["ta","teacher"]}),"Staff"),v(c($.get,"assignments",{}),"Assignments")).done(p)}))}$(document).ready((function(){b()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,